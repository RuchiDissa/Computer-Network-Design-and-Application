#include <stdio.h>            
#include <stdlib.h>           
#include <string.h>           
#include <unistd.h>           
#include <sys/socket.h>       
#include <netinet/in.h>       
#include <arpa/inet.h>        
#include <ctype.h>            
#include <dirent.h>            
#include <sys/stat.h>          

#define BUFFER_SIZE 1024      
#define MAX_USERS 100         
#define MAX_USERNAME_LENGTH 50 
#define MAX_PASSWORD_LENGTH 50 

// Define structure to hold user information
typedef struct {
    char username[MAX_USERNAME_LENGTH]; 
    char password[MAX_PASSWORD_LENGTH]; 
} User;

// Global variables to store user information
User users[MAX_USERS]; 
int num_users = 0;     

// Function to load user information from a password file
void load_password_file(const char *password_file) {
    FILE *file = fopen(password_file, "r"); 
    if (file == NULL) {                      
        perror("Error opening password file"); 
        exit(EXIT_FAILURE);                    
    }

    char line[MAX_USERNAME_LENGTH + MAX_PASSWORD_LENGTH + 2]; 
    // Read each line of the file
    while (fgets(line, sizeof(line), file) != NULL && num_users < MAX_USERS) {
        // Split the line into username and password
        char *username = strtok(line, ":");         
        char *password = strtok(NULL, "\n");        

        // Copy username and password into users array
        if (username != NULL && password != NULL) {
            strncpy(users[num_users].username, username, MAX_USERNAME_LENGTH); 
            strncpy(users[num_users].password, password, MAX_PASSWORD_LENGTH); 
            num_users++; s
        }
    }

    fclose(file); // Close the password file
}

// Function to handle communication with a client
void handle_client(int client_socket, const char *directory) {
    char buffer[BUFFER_SIZE]; 
    char response[BUFFER_SIZE]; 

    // Send welcome message to client
    sprintf(response, "Welcome to Bob's file server\n");
    send(client_socket, response, strlen(response), 0);

    // Authentication flag
    int authenticated = 0; 
    char current_user[MAX_USERNAME_LENGTH]; 

    // Receive and process commands from client
    while (recv(client_socket, buffer, BUFFER_SIZE, 0) > 0) { 
        printf("Received command: %s\n", buffer); 

        // Parse command and arguments
        char *command = strtok(buffer, " \n"); 
        char *argument = strtok(NULL, "\n");    
        char *username = NULL;
        char *password = NULL;

        // If the command is USER, extract username and password
        if (strcmp(command, "USER") == 0 && argument != NULL) {
            username = strtok(argument, " ");   
            password = strtok(NULL, "\n");       
        }

        // Debug prints
        printf("Command: %s\n", command);
        printf("Username: %s\n", username);
        printf("Password: %s\n", password);
        printf("Argument: %s\n", argument);

        
        printf("Buffer after parsing: %s\n", buffer);

        
        if (strcmp(command, "USER") == 0 && username != NULL && password != NULL) {
            // Authenticate user
            authenticated = 0;
            for (int i = 0; i < num_users; i++) {
                if (strcmp(users[i].username, username) == 0 && strcmp(users[i].password, password) == 0) {
                    authenticated = 1;
                    strcpy(current_user, username); 
                    break; 
                }
            }
            // Send response
            if (authenticated) {
                sprintf(response, "200 User %s granted access.\n", username);
            } else {
                sprintf(response, "400 User not found. Please try with another user.\n"); 
            }
            send(client_socket, response, strlen(response), 0); 
        } else if (strcmp(command, "LIST") == 0 && authenticated) { 
            // List files in directory
            DIR *dir; 
            struct dirent *entry; 
            dir = opendir(directory); 
            if (dir == NULL) { 
                sprintf(response, "500 Failed to open directory.\n");
                send(client_socket, response, strlen(response), 0); 
            } else {
                // Start building the response
                sprintf(response, "Listing files in directory:\n"); 
                send(client_socket, response, strlen(response), 0); 

                // Iterate through directory entries
                while ((entry = readdir(dir)) != NULL) { 
                    if (entry->d_type == DT_REG) { 
                        
                        if (strcmp(entry->d_name, "server") != 0 && strcmp(entry->d_name, "password_file.cfg") != 0 && strcmp(entry->d_name, "newserver2.c") != 0 && strcmp(entry->d_name, "pser") != 0) {
                            struct stat file_stat; 
                            char filepath[PATH_MAX]; 
                            snprintf(filepath, PATH_MAX, "%s/%s", directory, entry->d_name);

                            // Get file size
                            if (stat(filepath, &file_stat) == 0) { 
                                // Append filename and size to the response
                                sprintf(response, "%s %ld\n", entry->d_name, file_stat.st_size); 
                                send(client_socket, response, strlen(response), 0); 
                            }
                        }
                    }
                }

                // Send terminator
                send(client_socket, ".\n", 2, 0); 
                closedir(dir); 
            }
        } else if (strcmp(command, "GET") == 0 && authenticated) {
            // Get file content
            if (argument != NULL) {
                char *filename = argument; t
                printf("Filename: %s\n", filename);
                char filepath[PATH_MAX]; 
                snprintf(filepath, PATH_MAX, "%s/%s", directory, filename); 
                FILE *file = fopen(filepath, "r"); 
                if (file != NULL) {
                    // File found, send content to client
                    sprintf(response, "200 File content for %s:\n", filename);
                    send(client_socket, response, strlen(response), 0); 
                    while (fgets(response, BUFFER_SIZE, file) != NULL) {
                        send(client_socket, response, strlen(response), 0); 
                    }
                    fclose(file); 
                    // Send termination signal
                    send(client_socket, ".\r\n.\r\n", 6, 0); 
                } else {
                    // File not found
                    sprintf(response, "404 File %s not found.\n", filename); 
                    send(client_socket, response, strlen(response), 0); 
                }
            } else {
                // Incorrect syntax
                sprintf(response, "500 Syntax error in parameters or command unrecognized.\n"); 
                send(client_socket, response, strlen(response), 0);
            }
} else if (strcmp(command, "PUT") == 0 && authenticated) {
    // Save file content on server
    if (argument != NULL) {
        char *filename = argument; 
        printf("Filename: %s\n", filename); 
        if (filename != NULL) {
            char filepath[PATH_MAX]; 
            snprintf(filepath, PATH_MAX, "%s/%s", directory, filename); 
            FILE *file = fopen(filepath, "w"); 
            if (file != NULL) {
                // Receive and save file content
                ssize_t bytes_received;
                int lines_written = 0; // Track lines written
                int total_bytes_written = 0; 
                while ((bytes_received = recv(client_socket, buffer, BUFFER_SIZE, 0)) > 0) { 
                    // Check for termination signal or limit of two lines
                    if (strcmp(buffer, ".\r\n.\r\n") == 0 || lines_written >= 2) {
                        break; 
                    }
                    // Write data to file
                    fwrite(buffer, sizeof(char), bytes_received, file);
                    // Count the lines written
                    if (buffer[bytes_received - 1] == '\n') {
                        lines_written++;
                    }
                    // Update total bytes written
                    total_bytes_written += bytes_received;
                }
                fclose(file); // Close file
                if (lines_written > 0) {
                    // File saved successfully
                    sprintf(response, ".\n200 %d Byte %s file retrieved by server and was saved.\n", total_bytes_written, filename); 
                    send(client_socket, response, strlen(response), 0); 
                } else {
                    // File save failed
                    sprintf(response, ".\n400 File cannot be saved on server side.\n"); 
                    send(client_socket, response, strlen(response), 0); 
                }
            } else {
                // Unable to save file on server
                sprintf(response, ".\n400 File cannot be saved on server side.\n"); 
                send(client_socket, response, strlen(response), 0); 
            }
        } else {
            // Incorrect syntax
            sprintf(response, ".\n500 Syntax error in parameters or command unrecognized.\n"); 
            send(client_socket, response, strlen(response), 0); 
        }
    } else {
        // Incorrect syntax
        sprintf(response, ".\n500 Syntax error in parameters or command unrecognized.\n"); 
        send(client_socket, response, strlen(response), 0); 
    }

        } else if (strcmp(command, "DEL") == 0 && authenticated) { 
            // Delete file from server
            if (argument != NULL) {
                char *filename = argument;
                printf("Filename: %s\n", filename); 
                char filepath[PATH_MAX]; 
                snprintf(filepath, PATH_MAX, "%s/%s", directory, filename); 
                if (remove(filepath) == 0) {
                    // File deleted successfully
                    sprintf(response, "200 File %s deleted.\n", filename);
                    send(client_socket, response, strlen(response), 0); 
                } else {
                    // File not found or error deleting file
                    sprintf(response, "404 File %s is not on the server.\n", filename); 
                    send(client_socket, response, strlen(response), 0);
                }
            } else {
                // Incorrect syntax
                sprintf(response, "500 Syntax error in parameters or command unrecognized.\n"); 
                send(client_socket, response, strlen(response), 0);
            }
        } else if (strcmp(command, "QUIT") == 0 && authenticated) { 
            
            sprintf(response, "Goodbye, %s.\n", current_user); 
            send(client_socket, response, strlen(response), 0); 
            break; 
        } else {
            
            sprintf(response, "500 Syntax error in parameters or command unrecognized.\n"); 
            send(client_socket, response, strlen(response), 0); 
        }
    }

    
    close(client_socket); 
}


// Main function
int main(int argc, char *argv[]) {
    // Check if correct number of command-line arguments are provided
    if (argc != 7 || strcmp(argv[1], "-d") != 0 || strcmp(argv[3], "-p") != 0 || strcmp(argv[5], "-u") != 0) {
        // Print usage message if arguments are incorrect
        fprintf(stderr, "Usage: %s -d directory -p port -u password_file\n", argv[0]);
        exit(EXIT_FAILURE); 
    }

    // Extract directory, port, and password file from command-line arguments
    char *directory = argv[2]; 
    int port = atoi(argv[4]);  
    char *password_file = argv[6]; 

    // Load user information from password file
    load_password_file(password_file); 

    // Create server socket
    int server_socket = socket(AF_INET, SOCK_STREAM, 0); 
    if (server_socket < 0) {
        perror("Error creating server socket"); 
        exit(EXIT_FAILURE); 
    }

    // Set up server address structure
    struct sockaddr_in server_addr; 
    server_addr.sin_family = AF_INET; 
    server_addr.sin_addr.s_addr = INADDR_ANY; 
    server_addr.sin_port = htons(port); 

    // Bind server socket to specified port
    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) { 
        perror("Error binding server socket");
        exit(EXIT_FAILURE); 
    }

    // Listen for incoming connections
    if (listen(server_socket, 5) < 0) {
        perror("Error listening for connections"); 
        exit(EXIT_FAILURE);
    }

    printf("File server listening on port %d\n", port); 

    // Accept incoming connections and handle clients
    while (1) { 
        struct sockaddr_in client_addr; 
        socklen_t client_addr_len = sizeof(client_addr); 
        // Accept client connection
        int client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_addr_len); 
        if (client_socket < 0) { 
            perror("Error accepting client connection"); 
            continue; 
        }

        // Handle communication with client
        handle_client(client_socket, directory);
    }

    // Close server socket
    close(server_socket); 

    return 0; 
}
