// gcc -o server server.c
//./server -d /home/student/21815070-p 8888 -u password_file

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

// Define maximum number of users and lengths of username and password
#define MAX_USERS 100
#define MAX_USERNAME_LENGTH 50
#define MAX_PASSWORD_LENGTH 50

// Define structure to hold user information
typedef struct {
    char username[MAX_USERNAME_LENGTH];
    char password[MAX_PASSWORD_LENGTH];
} User;

// Declare global variables
User users[MAX_USERS];
int num_users = 0;

// Function to load user information from a password file
void load_password_file(const char *password_file) {
    FILE *file = fopen(password_file, "r");
    if (file == NULL) {
        perror("Error opening password file");
        exit(EXIT_FAILURE);
    }

    char line[MAX_USERNAME_LENGTH + MAX_PASSWORD_LENGTH + 2]; 
    // Read each line of the file
    while (fgets(line, sizeof(line), file) != NULL && num_users < MAX_USERS) {
        // Split the line into username and password
        char *username = strtok(line, ":");
        char *password = strtok(NULL, "\n");

        // Copy username and password into users array
        if (username != NULL && password != NULL) {
            strncpy(users[num_users].username, username, MAX_USERNAME_LENGTH);
            strncpy(users[num_users].password, password, MAX_PASSWORD_LENGTH);
            num_users++;
        }
    }

    fclose(file);
}

// Function to handle communication with a client
void handle_client(int client_socket) {
    char buffer[1024];
    ssize_t bytes_received;

    // Receive data from client
    bytes_received = recv(client_socket, buffer, sizeof(buffer), 0);
    if (bytes_received < 0) {
        perror("Error receiving data from client");
        close(client_socket);
        return;
    }

    // Print received data
    printf("Received from client: %.*s\n", (int)bytes_received, buffer);

    // Send data back to client
    if (send(client_socket, buffer, bytes_received, 0) < 0) {
        perror("Error sending data to client");
        close(client_socket);
        return;
    }

    // Close client socket
    close(client_socket);
}

int main(int argc, char *argv[]) {
    // Check if correct number of command-line arguments are provided
    if (argc != 7 || strcmp(argv[1], "-d") != 0 || strcmp(argv[3], "-p") != 0 || strcmp(argv[5], "-u") != 0) {
        // Print usage message if arguments are incorrect
        fprintf(stderr, "Usage: %s -d directory -p port -u password\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    // Extract directory, port, and password file from command-line arguments
    char *directory = argv[2];
    int port = atoi(argv[4]);
    char *password_file = argv[6];

    // Load user information from password file
    load_password_file(password_file);

    // Create server socket
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket < 0) {
        perror("Error creating server socket");
        exit(EXIT_FAILURE);
    }

    // Set up server address structure
    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(port);

    // Bind server socket to specified port
    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Error binding server socket");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(server_socket, 5) < 0) {
        perror("Error listening for connections");
        exit(EXIT_FAILURE);
    }

    // Print server information
    printf("Server started. Listening on port %d\n", port);

    // Accept incoming connections and handle clients
    while (1) {
        struct sockaddr_in client_addr;
        socklen_t client_addr_len = sizeof(client_addr);
        // Accept client connection
        int client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_addr_len);
        if (client_socket < 0) {
            perror("Error accepting client connection");
            continue;
        }

        // Handle communication with client
        handle_client(client_socket);
    }

    // Close server socket
    close(server_socket);

    return 0;
}
