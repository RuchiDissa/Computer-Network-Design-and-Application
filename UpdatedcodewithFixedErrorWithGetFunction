#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <ctype.h>
#include <dirent.h>
#include <sys/stat.h>
#include <limits.h>

#define BUFFER_SIZE 1024
#define MAX_USERS 200
#define MAX_USERNAME_LENGTH 50
#define MAX_PASSWORD_LENGTH 50

// Define user structure
typedef struct {
    char username[MAX_USERNAME_LENGTH];
    char password[MAX_PASSWORD_LENGTH];
} User;

// Global variables
User users[MAX_USERS];
int num_users = 0;

// Function to load user information from a password file
void load_password_file(const char *password_file) {
    FILE *file = fopen(password_file, "r");
    if (file == NULL) {
        perror("Error opening password file");
        exit(EXIT_FAILURE);
    }

    char line[MAX_USERNAME_LENGTH + MAX_PASSWORD_LENGTH + 2];
    while (fgets(line, sizeof(line), file) != NULL && num_users < MAX_USERS) {
        char *username = strtok(line, ":");
        char *password = strtok(NULL, "\n");

        if (username != NULL && password != NULL) {
            strncpy(users[num_users].username, username, MAX_USERNAME_LENGTH);
            strncpy(users[num_users].password, password, MAX_PASSWORD_LENGTH);
            num_users++;
        }
    }

    fclose(file);
}

// Function to handle communication with a client
void handle_client(int client_socket, const char *directory) {
    char buffer[BUFFER_SIZE]; // Buffer to store received data
    char response[BUFFER_SIZE]; // Buffer to store response data

    // Send welcome message to client
    sprintf(response, "Welcome to Bob's file server\n");
    send(client_socket, response, strlen(response), 0);

    // Authentication flag
    int authenticated = 0; // Flag to indicate whether the client is authenticated
    char current_user[MAX_USERNAME_LENGTH]; // Variable to store the username of the current user

    // Receive and process commands from client
    while (recv(client_socket, buffer, BUFFER_SIZE, 0) > 0) { // Receive data from client
        printf("Received command: %s\n", buffer); // Debug print

        // Parse command and arguments
        char *command = strtok(buffer, " \n"); // Extract command
        char *argument = strtok(NULL, "\n");    // Extract argument (e.g., filename)
        char *username = NULL;
        char *password = NULL;

        // If the command is USER, extract username and password
        if (strcmp(command, "USER") == 0 && argument != NULL) {
            username = strtok(argument, " ");    // Extract username
            password = strtok(NULL, "\n");       // Extract password
        }

        // Debug prints
        printf("Command: %s\n", command);
        printf("Username: %s\n", username);
        printf("Password: %s\n", password);
        printf("Argument: %s\n", argument);

        // Debug print to see the content of the buffer after parsing
        printf("Buffer after parsing: %s\n", buffer);

        // Check if command is USER and username and password are provided
        if (strcmp(command, "USER") == 0 && username != NULL && password != NULL) {
            // Authenticate user
            authenticated = 0; // Reset authentication flag
            for (int i = 0; i < num_users; i++) {
                if (strcmp(users[i].username, username) == 0 && strcmp(users[i].password, password) == 0) {
                    authenticated = 1; // Set authentication flag
                    strcpy(current_user, username); // Store current username
                    break; // Exit loop if user is authenticated
                }
            }
            // Send response
            if (authenticated) {
                sprintf(response, "200 User %s granted to access.\n", username); // Send success message
            } else {
                sprintf(response, "400 User not found. Please try with another user.\n"); // Send error message
            }
            send(client_socket, response, strlen(response), 0); // Send response to client
        } else if (strcmp(command, "LIST") == 0 && authenticated) { // Check if command is LIST and user is authenticated
            // List files in directory
            DIR *dir; // Directory pointer
            struct dirent *entry; // Directory entry structure
            dir = opendir(directory); // Open directory
            if (dir == NULL) { // Check if directory opening failed
                sprintf(response, "500 Failed to open directory.\n"); // Send error message
                send(client_socket, response, strlen(response), 0); // Send response to client
            } else {
                // Start building the response
                sprintf(response, "Listing files in directory:\n"); // Send header message
                send(client_socket, response, strlen(response), 0); // Send header message to client

                // Iterate through directory entries
                while ((entry = readdir(dir)) != NULL) { // Read directory entries
                    if (entry->d_type == DT_REG) { // Check if it's a regular file
                        // Exclude sensitive files from the list (e.g., server files, password file)
                        if (strcmp(entry->d_name, "server") != 0 && strcmp(entry->d_name, "password_file.cfg") != 0 && strcmp(entry->d_name,"newserver2.c")!=0 && strcmp(entry->d_name,"pser>
                            struct stat file_stat; // File status structure
                            char filepath[PATH_MAX]; // Buffer to store file path
                            snprintf(filepath, PATH_MAX, "%s/%s", directory, entry->d_name); // Construct file path

                            // Get file size
                            if (stat(filepath, &file_stat) == 0) { // Get file status
                                // Append filename and size to the response
                                sprintf(response, "%s %ld\n", entry->d_name, file_stat.st_size); // Format filename and size
                                send(client_socket, response, strlen(response), 0); // Send filename and size to client
                            }
                        }
                    }
                }

                // Send terminator
                send(client_socket, ".\n", 2, 0); // Send terminator
                closedir(dir); // Close directory
            }
        } else if (strcmp(command, "GET") == 0 && authenticated) { // Check if command is GET and user is authenticated
            // Get file content
            if (argument != NULL) {
                char *filename = argument; // Extract filename directly from argument
                printf("Filename: %s\n", filename); // Debug print
                char filepath[PATH_MAX]; // Buffer to store file path
                snprintf(filepath, PATH_MAX, "%s/%s", directory, filename); // Construct file path
                FILE *file = fopen(filepath, "r"); // Open file for reading
                if (file != NULL) {
                    // File found, send content to client
                    sprintf(response, "200 File content for %s:\n", filename); // Send success message
                    send(client_socket, response, strlen(response), 0); // Send response to client
                    while (fgets(response, BUFFER_SIZE, file) != NULL) {
                        send(client_socket, response, strlen(response), 0); // Send file content to client
                    }
                    fclose(file); // Close file
                    // Send termination signal
                    send(client_socket, ".\r\n.\r\n", 6, 0); // Send termination signal
                } else {
                    // File not found
                    sprintf(response, "404 File %s not found.\n", filename); // Send error message
                    send(client_socket, response, strlen(response), 0); // Send response to client
                }
            } else {
                // Incorrect syntax
                sprintf(response, "500 Syntax error in parameters or command unrecognized.\n"); // Send error message
                send(client_socket, response, strlen(response), 0); // Send response to client
            }
        } else if (strcmp(command, "QUIT") == 0 && authenticated) { // Check if command is QUIT and user is authenticated
            // Close connection
            sprintf(response, "Goodbye, %s.\n", current_user); // Send goodbye message
            send(client_socket, response, strlen(response), 0); // Send response to client
            break; // Exit loop
        } else { // Handle unsupported command or incorrect syntax
            // Unsupported command or incorrect syntax
            sprintf(response, "500 Syntax error in parameters or command unrecognized.\n"); // Send error message
            send(client_socket, response, strlen(response), 0); // Send response to client
        }
    }

    // Close client socket
    close(client_socket); // Close client socket
}

// Main function
int main(int argc, char *argv[]) {
    // Check command-line arguments
    if (argc != 7 || strcmp(argv[1], "-d") != 0 || strcmp(argv[3], "-p") != 0 || strcmp(argv[5], "-u") != 0) {
        fprintf(stderr, "Usage: %s -d directory -p port -u password_file\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    // Extract directory, port, and password file from command-line arguments
    char *directory = argv[2];
    int port = atoi(argv[4]);
    char *password_file = argv[6];

    // Load user information from password file
    load_password_file(password_file);

    // Create server socket
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket < 0) {
        perror("Error creating server socket");
        exit(EXIT_FAILURE);
    }

    // Set up server address structure
    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(port);

    // Bind server socket to specified port
    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Error binding server socket");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(server_socket, 5) < 0) {
        perror("Error listening for connections");
        exit(EXIT_FAILURE);
    }

    // Print message indicating server is listening
    printf("File server listening on port %d\n", port);

    // Accept incoming connections and handle clients
    while (1) {
        struct sockaddr_in client_addr;
        socklen_t client_addr_len = sizeof(client_addr);
        int client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_addr_len);
        if (client_socket < 0) {
            perror("Error accepting client connection");
            continue;
        }

        // Handle communication with client
        handle_client(client_socket, directory);
    }

    // Close server socket
    close(server_socket);

    return 0;
}
